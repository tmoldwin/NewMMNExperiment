function [mat, soundVec, codeVec] = randpermSD(numStands, numDevs, stdcnts, devcnts, separation, soundMap, codeMap); %%standMatrix and dev Matrix are matrices of patterns
mat = [];
soundVec = [];
codeVec = [];
%%add standards
for n = 1:numStands
    temp = n .* ones(1,stdcnts(n));
    mat = [mat temp];
end
%%add deviants
for n = 1:numDevs
    temp = n+numStands.* ones(1,devcnts(n));
    mat = [mat temp];
end
%% randomly permute
mat = mat(:,randperm(size(mat,2)));
%%fix invalid placements
for n = 1:length(mat)
    n2 = n;
    sw = 0;
    while(checkValidSwap(mat, n, n2, numStands, separation)==0)
        sw=1;
        n2 = ceil(length(mat).*rand());
    end
    mat = swap(mat, n, n2);
    if sw == 1
        n
        n2
        before1 = mat(eP(n-separation): eL(n-1,mat))
        after1 = mat(eP(n+1):eL(n+separation,mat))
        before2 = mat(eP(n2-separation): eL(n2-1,mat))
        after2 = mat(eP(n2-separation): eL(n2-1,mat))
    end
end
for n = 1:length(mat)
    soundVec = [soundVec soundMap.get(mat(n))'];
    codeVec = [codeVec codeMap.get(mat(n))'];
end
end

function isClean = checkLocationClean(n, numStands, separation, mat)
isClean = 1;
before = mat(eP(n-separation): eL(n-1,mat));
after = mat(eP(n+1):eL(n+separation,mat));
if((sum(after > numStands) > 0 )|| (sum(before > numStands) > 0))
    isClean = 0;
end
end

function isValid = checkValidSwap(mat, n1, n2, numStands, separation)
isValid = 1;
if n1 > numStands %%if n1 is a deviant
    isValid = checkLocationClean(n2, numStands, separation, mat);
end
if n2 > numStands %%if n1 is a deviant
    isValid = checkLocationClean(n1, numStands, separation, mat);
end
end

function mat = swap(mat,n,r)
num = mat(n);
mat(n) = mat(r);
mat(r) = num;
end

function out = eP(in)
if(in > 1)
    out = in;
else out = 1;
end
end

function out = eL(in, mat)
if(in < length(mat))
    out = in;
else out = length(mat);
end
end